//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeMeMe.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MeMeMeEntities : DbContext
    {
        public MeMeMeEntities()
            : base("name=MeMeMeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Antropometria> Antropometria { get; set; }
        public virtual DbSet<AssegnazioniElenco> AssegnazioniElenco { get; set; }
        public virtual DbSet<AssegnazioniRegistro> AssegnazioniRegistro { get; set; }
        public virtual DbSet<AttivitaFisica> AttivitaFisica { get; set; }
        public virtual DbSet<Comuni> Comuni { get; set; }
        public virtual DbSet<DiarioDieta24> DiarioDieta24 { get; set; }
        public virtual DbSet<EmergenzeLog> EmergenzeLog { get; set; }
        public virtual DbSet<KitFlaconiAssegnazione> KitFlaconiAssegnazione { get; set; }
        public virtual DbSet<KitRandomizzazione> KitRandomizzazione { get; set; }
        public virtual DbSet<LUIParentela> LUIParentela { get; set; }
        public virtual DbSet<LUIstruzione> LUIstruzione { get; set; }
        public virtual DbSet<LUProfessione> LUProfessione { get; set; }
        public virtual DbSet<LUStatoCivile> LUStatoCivile { get; set; }
        public virtual DbSet<LUTipoTrattamento> LUTipoTrattamento { get; set; }
        public virtual DbSet<Prelievo> Prelievo { get; set; }
        public virtual DbSet<StatiElenco> StatiElenco { get; set; }
        public virtual DbSet<Trattamenti> Trattamenti { get; set; }
        public virtual DbSet<ValutazioneMetformina> ValutazioneMetformina { get; set; }
        public virtual DbSet<AssegnazioneFarmaco> AssegnazioneFarmaco { get; set; }
        public virtual DbSet<SAE> SAE { get; set; }
        public virtual DbSet<AE> AE { get; set; }
        public virtual DbSet<LUAE_Grado> LUAE_Grado { get; set; }
        public virtual DbSet<LUAE_Outcome> LUAE_Outcome { get; set; }
        public virtual DbSet<LUAE_TipoEvento> LUAE_TipoEvento { get; set; }
        public virtual DbSet<AEDettaglio> AEDettaglio { get; set; }
        public virtual DbSet<StatiRegistro> StatiRegistro { get; set; }
        public virtual DbSet<StileDiVita> StileDiVita { get; set; }
        public virtual DbSet<TrattamentiDettaglio> TrattamentiDettaglio { get; set; }
        public virtual DbSet<LUDropMotivazioni> LUDropMotivazioni { get; set; }
        public virtual DbSet<Drop> Drop { get; set; }
        public virtual DbSet<Anagrafica> Anagrafica { get; set; }
        public virtual DbSet<MEDAS> MEDAS { get; set; }
    
        public virtual int sp_EmergenzaRotturaCieco(Nullable<int> idPaziente, ObjectParameter randomizzazione)
        {
            var idPazienteParameter = idPaziente.HasValue ?
                new ObjectParameter("idPaziente", idPaziente) :
                new ObjectParameter("idPaziente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EmergenzaRotturaCieco", idPazienteParameter, randomizzazione);
        }
    
        public virtual int sp_RandomizzazioneFarmaco(Nullable<int> idPaziente, Nullable<int> idAssegnazioneElenco, string utente)
        {
            var idPazienteParameter = idPaziente.HasValue ?
                new ObjectParameter("idPaziente", idPaziente) :
                new ObjectParameter("idPaziente", typeof(int));
    
            var idAssegnazioneElencoParameter = idAssegnazioneElenco.HasValue ?
                new ObjectParameter("idAssegnazioneElenco", idAssegnazioneElenco) :
                new ObjectParameter("idAssegnazioneElenco", typeof(int));
    
            var utenteParameter = utente != null ?
                new ObjectParameter("utente", utente) :
                new ObjectParameter("utente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RandomizzazioneFarmaco", idPazienteParameter, idAssegnazioneElencoParameter, utenteParameter);
        }
    
        public virtual ObjectResult<sp_ScadenziarioFlaconi_Result> sp_ScadenziarioFlaconi(Nullable<System.DateTime> dateDa, Nullable<System.DateTime> dateA)
        {
            var dateDaParameter = dateDa.HasValue ?
                new ObjectParameter("dateDa", dateDa) :
                new ObjectParameter("dateDa", typeof(System.DateTime));
    
            var dateAParameter = dateA.HasValue ?
                new ObjectParameter("dateA", dateA) :
                new ObjectParameter("dateA", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ScadenziarioFlaconi_Result>("sp_ScadenziarioFlaconi", dateDaParameter, dateAParameter);
        }
    
        public virtual ObjectResult<sp_StatisticaMagazzinoFarmaci_Result> sp_StatisticaMagazzinoFarmaci()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StatisticaMagazzinoFarmaci_Result>("sp_StatisticaMagazzinoFarmaci");
        }
    
        public virtual ObjectResult<sp_StatisticaRandomizzazione_Result> sp_StatisticaRandomizzazione()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StatisticaRandomizzazione_Result>("sp_StatisticaRandomizzazione");
        }
    
        public virtual ObjectResult<sp_AssegnazioniPostRandomizzazioneDateScadenza_Result> sp_AssegnazioniPostRandomizzazioneDateScadenza(Nullable<int> idPaziente, Nullable<int> numFlaconi, Nullable<System.DateTime> dataConsegna, Nullable<int> dosaggio)
        {
            var idPazienteParameter = idPaziente.HasValue ?
                new ObjectParameter("idPaziente", idPaziente) :
                new ObjectParameter("idPaziente", typeof(int));
    
            var numFlaconiParameter = numFlaconi.HasValue ?
                new ObjectParameter("numFlaconi", numFlaconi) :
                new ObjectParameter("numFlaconi", typeof(int));
    
            var dataConsegnaParameter = dataConsegna.HasValue ?
                new ObjectParameter("dataConsegna", dataConsegna) :
                new ObjectParameter("dataConsegna", typeof(System.DateTime));
    
            var dosaggioParameter = dosaggio.HasValue ?
                new ObjectParameter("dosaggio", dosaggio) :
                new ObjectParameter("dosaggio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AssegnazioniPostRandomizzazioneDateScadenza_Result>("sp_AssegnazioniPostRandomizzazioneDateScadenza", idPazienteParameter, numFlaconiParameter, dataConsegnaParameter, dosaggioParameter);
        }
    
        public virtual int sp_AssegnazioniPostRandomizzazione(Nullable<int> idPaziente, string utente, Nullable<int> idAssegnazioneElenco, Nullable<int> numFlaconi, Nullable<System.DateTime> dataConsegna, Nullable<int> dosaggio)
        {
            var idPazienteParameter = idPaziente.HasValue ?
                new ObjectParameter("idPaziente", idPaziente) :
                new ObjectParameter("idPaziente", typeof(int));
    
            var utenteParameter = utente != null ?
                new ObjectParameter("utente", utente) :
                new ObjectParameter("utente", typeof(string));
    
            var idAssegnazioneElencoParameter = idAssegnazioneElenco.HasValue ?
                new ObjectParameter("idAssegnazioneElenco", idAssegnazioneElenco) :
                new ObjectParameter("idAssegnazioneElenco", typeof(int));
    
            var numFlaconiParameter = numFlaconi.HasValue ?
                new ObjectParameter("numFlaconi", numFlaconi) :
                new ObjectParameter("numFlaconi", typeof(int));
    
            var dataConsegnaParameter = dataConsegna.HasValue ?
                new ObjectParameter("dataConsegna", dataConsegna) :
                new ObjectParameter("dataConsegna", typeof(System.DateTime));
    
            var dosaggioParameter = dosaggio.HasValue ?
                new ObjectParameter("dosaggio", dosaggio) :
                new ObjectParameter("dosaggio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AssegnazioniPostRandomizzazione", idPazienteParameter, utenteParameter, idAssegnazioneElencoParameter, numFlaconiParameter, dataConsegnaParameter, dosaggioParameter);
        }
    
        public virtual ObjectResult<sp_StatisticaCampionamento_Result> sp_StatisticaCampionamento()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_StatisticaCampionamento_Result>("sp_StatisticaCampionamento");
        }
    
        public virtual int sp_StimaFabbisognioFlaconi(string dataConsegna, string dataScadenza, ObjectParameter msg)
        {
            var dataConsegnaParameter = dataConsegna != null ?
                new ObjectParameter("dataConsegna", dataConsegna) :
                new ObjectParameter("dataConsegna", typeof(string));
    
            var dataScadenzaParameter = dataScadenza != null ?
                new ObjectParameter("dataScadenza", dataScadenza) :
                new ObjectParameter("dataScadenza", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_StimaFabbisognioFlaconi", dataConsegnaParameter, dataScadenzaParameter, msg);
        }
    
        public virtual ObjectResult<sp_ElencoPrelievi_Result> sp_ElencoPrelievi(Nullable<System.DateTime> dateDa, Nullable<System.DateTime> dateA)
        {
            var dateDaParameter = dateDa.HasValue ?
                new ObjectParameter("dateDa", dateDa) :
                new ObjectParameter("dateDa", typeof(System.DateTime));
    
            var dateAParameter = dateA.HasValue ?
                new ObjectParameter("dateA", dateA) :
                new ObjectParameter("dateA", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ElencoPrelievi_Result>("sp_ElencoPrelievi", dateDaParameter, dateAParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_disponibilitaMinima()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_disponibilitaMinima");
        }
    }
}
